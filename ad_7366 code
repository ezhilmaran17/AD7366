module SPI_ADC(
    input wire clk,
    input wire rst,
    output reg [11:0] adc_data,
    output reg conv_done,
    output reg cs,
    output reg sclk,
    output reg mosi,
    input miso,
    input cnvst_sw,
    output reg cnvst
);

parameter IDLE = 2'b00;
parameter TRANSFER = 2'b01;

reg [1:0] state;
reg [11:0] shift_reg;
reg [3:0] bit_counter;

initial
cnvst <= 1'b0;

always @(posedge clk) begin
    if (rst) begin
        state <= IDLE;
        bit_counter <= 4'b1111;
        shift_reg <= 12'b0;
        conv_done <= 0;
    end 
    else 
    begin
        case(state)
            IDLE: 
            begin
                cs <= 1; 
                sclk <= 0; 
                mosi <= 0; 
                if (!conv_done) 
                    begin
                    conv_done <= 1;
                    end
                if (cnvst_sw) 
                    begin
                    conv_done <= 0;
                    state <= TRANSFER;
                    end
            end
            TRANSFER: begin
                cs <= 0; 
                sclk <= 0; //doubt 
                cnvst<=0;

                if (bit_counter > 0) 
                    begin
                    sclk <= 1; 
                    shift_reg <= {miso, shift_reg[11:1]}; 
                    mosi <= /* Data to send */;
                    bit_counter <= bit_counter - 1;
                    cnvst <=1'b1;
                    end 
                else
                    begin
                    cs <= 1; // CS high (inactive)
                    cnvst <= 1'b1;
                    state <= IDLE;
                    adc_data <= shift_reg[11:0];
                    end
            end
            default: state <= IDLE;
        endcase
    end
end

endmodule
